. ~/.zsh/aliases

####### General ###########

# changing directory to code project
function c { cd ~/code/$1; }

alias reload='. ~/.bash_profile'

# replace: find/replace strings across multiple files
#     example: replace *.rb find_string replace_string
function replace {
  find . -name "$1" -type f -print0 | xargs -0 sed -i -e "s/$2/$3/g"
}

# autoFormat: remove trailing whitespace and auto-indent multiple files
#     example: autoFormat *.rb
function autoFormat {
  find . -name "$1" -exec vim -s ~/.bin/formatDocs.vim {} \;
}

######### Rails ###########
alias qspork='bundle exec spork cucumber'
alias rspork='bundle exec spork'

alias log='tail -f -n 800 log/development.log'
alias qlog='tail -f -n 800 log/cucumber.log'
alias tlog='tail -f -n 800 log/test.log'

alias ts='tddium spec'


####### Cucumber ##########
alias cuke='bundle exec cucumber -r features'
alias icuke='CUCUMBER_INTERACTIVE=true bundle exec cucumber -r features'

# slq (show last cukes): Show last 5 modified cukes
alias slq='find . -type f -name "*.feature" -print | xargs ls -rlt | tail -5'

# lq (last cuke): Run last modified cuke
alias lq='find . -type f -name "*.feature" -print | xargs ls -rt | tail -1 | xargs bundle exec cucumber -r features'


####### Linux-Mac Compatibility ###########
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
  alias pbcopy="xsel -b"
  alias mvim=gvim
fi


################# Git ###############

# Branch Clean: clears out all local git branches that have already been merged into the active branch
brclean () { git branch -d $( git branch --merged | grep -v '^\*' | grep -v 'master' ); }

# Remote Branch Clean: clears out all remote branches that have already been merged into master
rbrclean () {
  # Fetch remote branches and clear refs to deleted ones
  git fetch --prune

  # Update master
  git checkout master && git pull origin master

  if [ $? -eq 0 ]; then
    echo "Checkout successful -- Updating/cleaning code"

    branches_to_delete="$(git branch -r --merged | grep -v '^\*' | grep -v 'origin/master' | grep 'origin/' | sed 's/origin\///g')"
    if [[ "$branches_to_delete" == "" ]]; then
      echo "No remote branches to delete"
    else
      git push --delete origin $branches_to_delete
    fi
  else
    echo "Checkout unsuccessful -- Commit any working changes"
  fi
}

function gbclean {
  rbrclean
  brclean
}

alias gbc='gbclean'


####### General ###########

alias reload='. ~/.bash_profile'
alias ..='cd ..'
alias vi='vim'

alias stt='set_tab_title'
alias tb='tab-blue'
alias tr='tab-red'
alias to='tab-orange'
alias ty='tab-yellow'
alias tg='tab-green'
alias tp='tab-purple'
alias tw='tab-white'
alias td='tab-gray'

alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
alias vim="/Applications/MacVim.app/Contents/MacOS/Vim"

# changing directory to code project
function c { cd $CODE_HOME/$1; }

# ls
alias ls='ls -G -F'
alias l="ls -lAh"
alias ll="ls -l"
alias la='ls -A'

function autoformatall {
  autoformat "*.rb"
  autoformat "*.erb"
  autoformat "*.css"
  autoformat "*.js"
  autoformat "*.coffee"
  autoformat "*.scss"
  autoformat "*.sass"
  autoformat "*.feature"
}

command_exists () {
    type "$1" &> /dev/null ;
}

######### Rails ###########
alias log='tail -f -n 800 log/development.log'
alias tlog='tail -f -n 800 log/test.log'

alias rc='bundle exec rails console'
alias rg='bundle exec rails generate'
alias rs='bundle exec rails server'

alias rst='touch tmp/restart.txt'

####### Rspec ##########
alias irspec='INTERACTIVE_SPEC=true bundle exec rspec'

# rrspec -- rerun rspec test 10 times
function rrspec () {
  for i in {1..10}; do bundle exec rspec $1; done
}

# trspec -- thrash CPU + rerun rspec test 10 times
function trspec () {
  # Start thrashing processes
  THRASHERS=8
  for ((i = 1 ; i <= THRASHERS ; i++)); do
    echo "Starting thrasher $i/$THRASHERS"
    (yes &) > /dev/null 2>&1
  done

  # Run rspec test 10 times
  for i in {1..10}; do rspec $1; done

  # Stop thrashers
  echo "Stopping thrashers"
  killall yes
}

################# Git ###############
alias ga='git add'
alias gl='git pull'
alias gm='git commit -m'
alias gd='git diff'
alias gdc='git diff --cached'
alias gco='git checkout'
alias gb='git branch'
alias gs='git status'
alias gst='git stash'
alias gsp='git stash pop'
alias gma='git commit -ammend'
alias gg='git g'
alias glp="git log --graph --pretty=format:'\''%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue%an%Creset'\'' --abbrev-commit --all'"
alias gsq='git rebase -i'
alias conflicts='git ls-files -u'
alias ohfudge='git merge --abort'

# Branch Clean: clears out all local git branches that have already been merged into the active branch
brclean () {
  branches_to_delete="$( git branch --merged | grep -v '^\*' | grep -v 'master' | grep -v 'staging' )"
  if [[ "$branches_to_delete" == "" ]]; then
    echo "No branches to delete"
  else
    echo $branches_to_delete | xargs git branch -d
  fi
}

# Remote Branch Clean: clears out all remote branches that have already been merged into master
rbrclean () {
  # Fetch remote branches and clear refs to deleted ones
  git fetch --prune

  # Update master
  git checkout master && git pull origin master

  if [ $? -eq 0 ]; then
    echo "Checkout successful -- Updating/cleaning code"

    branches_to_delete="$(git branch -r --merged | grep -v '^\*' | grep -v 'origin/master' | grep -v 'origin/staging' | grep 'origin/' | sed 's/origin\///g')"
    if [[ "$branches_to_delete" == "" ]]; then
      echo "No remote branches to delete"
    else
      echo $branches_to_delete | xargs git push --delete origin
    fi
  else
    echo "Checkout unsuccessful -- Commit any working changes"
  fi
}

# Git Branch Clean: cleans out local and remote branches
function gbclean {
  # rbrclean
  brclean
  git pup
  git gc
}

alias gbc='gbclean'

# Git Branch Authors: show authors of all git branches
function git-branch-authors {
  git branch -r | grep -v 'HEAD' | while read branch
  do
    name="$(git log --pretty=tformat:%an -1 $branch)"
    if [ $# -gt 0 ] && [ "$name" == "$1" ]
    then
      echo $branch : $name
    fi

    if [ $# -eq 0 ]
    then
      echo $branch : $name
    fi
  done
}

function git-remote-branches {
  for k in `git branch -r|awk '{print $1}'`;do echo `git show --pretty=format:"%Cgreen%ci %Cblue%cr %Cred%cn %Creset" $k|head -n 1`\\t$k;done|sort -r
}

alias gba='git-branch-authors'

# Git Recent: show git branches organized by date
function git-recent {
  git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'
}


############## COLOR PRINTING #################
NORMAL=$(tty -s && tput sgr0)
GREEN=$(tty -s && tput setaf 2 && tput bold)
YELLOW=$(tty -s && tput setaf 3)
RED=$(tty -s && tput setaf 1)

function red() {
    echo -e "$RED$*$NORMAL"
}

function green() {
    echo -e "$GREEN$*$NORMAL"
}

function yellow() {
    echo -e "$YELLOW$*$NORMAL"
}

############# FILE EXTRACTION ##########
function unzipall() {
  ls *.zip | awk -F'.zip' '{print "unzip \""$0"\" -d \""$1"\""}' | sh
}

function unrarall() {
  ls *.rar | awk -F'.rar' '{print "mkdir \""$1"\" && unrar x \""$0"\" \""$1"\""}' | sh
}

######## FUNNNNNNNNNN!!!!!!!!!!!!  ############
alias trip='while :;do printf "\e[%d;%dH\e[48;5;%dm \e[0m" $(($RANDOM%$LINES)) $(($RANDOM%$COLUMNS)) $(($RANDOM%216 )); done # Its alive!'

. ~/.zsh/aliases

# changing directory to code project
function c { cd ~/code/$1; }

# alternative to "rails" command to use templates
function railsapp {
  template=$1
  appname=$2
  shift 2
  rails $appname -m http://github.com/ryanb/rails-templates/raw/master/$template.rb $@
}

# misc
alias reload='. ~/.bash_profile'
alias cuke='bundle exec cucumber -r features'

# example: replace *.rb find_string replace_string
function replace {
  find . -name "$1" -type f -print0 | xargs -0 sed -i -e "s/$2/$3/g"
}
alias ts='tddium spec'

# Run last cuke
alias lq='find . -type f -name "*.feature" -print | xargs ls -rt | tail -1 | xargs bundle exec cucumber -r features'

# Show last 5 modified cukes
alias slq='find . -type f -name "*.feature" -print | xargs ls -rlt | tail -5'

alias log='tail -f -n 800 log/development.log'
alias qlog='tail -f -n 800 log/cucumber.log'
alias tlog='tail -f -n 800 log/test.log'


# Operating-system dependent commands
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
  alias pbcopy="xsel -b"
  alias mvim=gvim
fi

# Jeff aliases
alias fbolt='cd ~/dev/fbolt'
alias s='rails server'
alias migrate='rake db:migrate'
alias mp='rake db:migrate && rake db:test:prepare'
alias m='rails generate migration'
alias gp='git pull origin master'
alias qc='bundle exec cucumber --tags ~@javascript --tags ~@sphinx'

alias setlib='export DYLD_LIBRARY_PATH="/usr/local/lib:$DYLD_LIBRARY_PATH"'
alias unsetlib='unset DYLD_LIBRARY_PATH'

alias gpom='git push origin master'

gf () { git fetch origin $*:$* && git co $*; }

bm () { ./script/generate migration $* && rake db:migrate && rake db:test:prepare; }

# Branch Clean: clears out all local git branches that have already been merged into the active branch
brclean () { git branch -d $( git branch --merged | grep -v '^\*' | grep -v 'master' ); }

# Remote Branch Clean: clears out all remote branches that have already been merged into master
rbrclean () {
  git fetch --prune
  git checkout master
  git pull origin master
  branches_to_delete="$(git branch -r --merged | grep -v '^\*' | grep -v 'origin/master' | grep 'origin/' | sed 's/origin\///g')"
  if [[ "$branches_to_delete" == "" ]]; then
    echo "No remote branches to delete"
  else
    git push --delete origin $branches_to_delete
  fi
}

function gbclean {
  rbrclean
  brclean
}

alias gbc='gbclean'
